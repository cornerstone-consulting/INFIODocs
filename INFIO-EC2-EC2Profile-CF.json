{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This stack will deploy INFIO EC2 Instance, EC2 Profile with required permissions assigned to the instance, and a Security Group attached to the INFIO instance.",
  "Parameters": {
    "ImageId": {
      "Type": "String",
      "Default": "ami-0a1eb5c60011479a6"
    },
    "EC2InstanceType": {
      "Type": "String",
      "Description": "Select the EC2 instance type",
      "AllowedValues": [ "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t3.medium", "t3.large", "t3.xlarge", 
      "t3.2xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m6a.large", "m6a.xlarge", "m6a.2xlarge", 
      "m6a.4xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", 
      "r5.4xlarge", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "d3.xlarge", "d3.2xlarge" ],
      "Default": "m6a.large"
    },
    "SubnetID": {
      "Type": "String",
      "Description": "ID of a subnet where Infio EC2 instance will be deployed",
      "ConstraintDescription": "Must be a private subnet in the AZ you select."
    },
    "DMSSubnetGroupSubnetIDs": {
      "Type": "CommaDelimitedList",
      "Description": "Comma-delimited list of subnet IDs. This list should hold the subnet/s of the source SQL server and the subnet/s of the destination Postgres Database."
    },
    "SourceSQLServerPort": {
      "Type": "Number",
      "Description": "Port number source SQL server communicates over.",
      "Default": 1433
    },
    "SourceSQLServerIP": {
      "Type": "String",
      "Description": "IP of your source SQL Database in the format x.x.x.x/32."
    },
    "TargetPGServerSG": {
      "Type": "String",
      "Description": "ID of one of the SGs attached to your target PostgreSQL Database."
    },
    "InfioEC2EncryptionKeyAlias": {
      "Type": "String",
      "Description": "Alias of the KMS encryption key you would like to use to encrypt the Infio EC2 instance, default is AWS managed aws/ebs KMS",
      "Default": "aws/ebs"
    },
    "VPCCIDR": {
      "Type": "String",
      "Description": "CIDR of the VPC where your Infio EC2 instance will be deployed."
    },
    "VPCID": {
      "Type": "String",
      "Description": "VPC ID where your Infio EC2 instance will be deployed."
    },
    "InboundCIDRIP": {
      "Type": "String",
      "Description": "CIDR or a single IP address that will be allowed to RDP inbound to the Infio EC2 Instance.",
      "ConstraintDescription": "Please enetr in the form of xx.xx.xx.xx/xx."
    }
  },
  "Resources": {
    "EC2DMSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName" : "infio-ec2-dms-sg",
        "GroupDescription": "Security group for Infio EC2 Instance and the DMS SC Instance.",
        "VpcId": { "Ref": "VPCID" },
        "SecurityGroupIngress": [ 
        {
          "IpProtocol": "tcp",
          "FromPort": 443,
          "ToPort": 443,
          "CidrIp": { "Ref": "VPCCIDR" }
        },
        {
          "IpProtocol": "tcp",
          "FromPort": 80,
          "ToPort": 80,
          "CidrIp": { "Ref": "VPCCIDR" }
        },
        {
          "IpProtocol": "tcp",
          "FromPort": 3389,
          "ToPort": 3389,
          "CidrIp": { "Ref": "InboundCIDRIP" }
        }
        ],
        "SecurityGroupEgress": [
        {
          "IpProtocol": "tcp",
          "FromPort": 443,
          "ToPort": 443,  
          "CidrIp": { "Ref": "VPCCIDR" }
        },
        {
          "IpProtocol": "tcp",
          "FromPort": 80,
          "ToPort": 80,  
          "CidrIp": { "Ref": "VPCCIDR" }
        }
        ]
       }
    },
    "InboundRuleFromSelfSQLPort": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties":{
          "IpProtocol": "tcp",
          "FromPort": { "Ref": "SourceSQLServerPort" }, 
          "ToPort": { "Ref": "SourceSQLServerPort" }, 
          "SourceSecurityGroupId":  { "Ref": "EC2DMSSecurityGroup" },
          "GroupId": { "Ref": "EC2DMSSecurityGroup" }
      }
    },
    "InboundRuleFromSelfPGPort": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties":{
          "IpProtocol": "tcp",
          "FromPort": 5432,
          "ToPort": 5432,
          "SourceSecurityGroupId":  { "Ref": "EC2DMSSecurityGroup" },
          "GroupId": { "Ref": "EC2DMSSecurityGroup" }
      }
    },
    "OutboundRuleToSelfSQLPort": {
       "Type": "AWS::EC2::SecurityGroupEgress",
       "Properties":{
          "IpProtocol": "tcp",
          "FromPort": { "Ref": "SourceSQLServerPort" }, 
          "ToPort": { "Ref": "SourceSQLServerPort" }, 
          "DestinationSecurityGroupId": { "Ref": "EC2DMSSecurityGroup" },
          "GroupId": { "Ref": "EC2DMSSecurityGroup" }
       }
    },
    "OutboundRuleToSelfPGPort": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties":{
         "IpProtocol": "tcp",
         "FromPort": 5432, 
         "ToPort": 5432, 
         "DestinationSecurityGroupId": { "Ref": "EC2DMSSecurityGroup" },
         "GroupId": { "Ref": "EC2DMSSecurityGroup" }
      }
   },
   "OutboundRuleToSourceSQLPort": {
    "Type": "AWS::EC2::SecurityGroupEgress",
    "Properties":{
      "IpProtocol": "tcp",
      "FromPort": { "Ref": "SourceSQLServerPort" }, 
      "ToPort": { "Ref": "SourceSQLServerPort" }, 
      "CidrIp": { "Ref": "SourceSQLServerIP" },
      "GroupId": { "Ref": "EC2DMSSecurityGroup" }
    }
    },
    "OutboundRuleToTargetPGPort": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties":{
          "IpProtocol": "tcp",
          "FromPort": 5432, 
          "ToPort": 5432, 
          "DestinationSecurityGroupId": { "Ref": "TargetPGServerSG" },  
          "GroupId": { "Ref": "EC2DMSSecurityGroup" }
      }
    },
    "InfioDMSSubnetGroup" : {
      "Type" : "AWS::DMS::ReplicationSubnetGroup",
      "Properties" : {
          "ReplicationSubnetGroupDescription" : "This is a DMS Subnet Group used by Infio assessment tool.",
          "ReplicationSubnetGroupIdentifier" : "infio-dms-subnet-group",
          "SubnetIds" : { "Ref": "DMSSubnetGroupSubnetIDs" }, 
          "Tags" : [{
            "Key" : "Purpose",
            "Value" : "infio"
            },
            {
              "Key" : "project",
              "Value" : "infio-assessment"
            } ]
        }
    },
    "InfioEC2Profile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "InstanceProfileName" : "infio-ec2-profile",
          "Path": "/",
          "Roles": [
            {
              "Ref": "InfioEC2Role"
            }
          ]
        }
      },
      "InfioEC2Role": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [ 
                      "ec2.amazonaws.com",
                      "dms-data-migrations.amazonaws.com",
                      "dms.us-east-1.amazonaws.com",
                      "dms.amazonaws.com"
                    ]
                },
                "Action": "sts:AssumeRole"
              }
            ]
          },
          "RoleName" : "infio-ec2-dms-role",
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "infio-ec2-dms-role-policy",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                        {
                          "Sid": "CloudFormationPermissionsForInfioEC2Instance",
                          "Effect": "Allow",
                          "Action": [
                            "cloudformation:DescribeStacks",
                            "cloudformation:DescribeStackEvents",
                            "cloudformation:DescribeStackResources",
                            "cloudformation:GetTemplate",
                            "cloudformation:ValidateTemplate" 
                          ],
                          "Resource": {
                                "Fn::Join": [ ":", [ "arn:aws:cloudformation", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "stack/*" ] ]
                              }
                        },
                        {
                          "Sid": "CloudFormationCreatePermissionsForInfioEC2Instance",
                          "Effect": "Allow",
                          "Action": [
                            "cloudformation:CreateStack"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Sid": "KMSPermissionsForInfioEC2Instance",
                          "Effect": "Allow",
                          "Action": [
                            "kms:DescribeKey",
                            "kms:EnableKeyRotation",
                            "kms:TagResource",
                            "kms:Decrypt",
                            "kms:Encrypt",
                            "kms:GenerateDataKey"
                          ],
                          "Resource": {
                            "Fn::Join": [ ":", [ "arn:aws:kms", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "key/*" ] ]
                          }
                        },
                        {
                          "Sid": "KMSCreatePermissionsForInfioEC2Instance",
                          "Effect": "Allow",
                          "Action": [
                              "kms:CreateKey",
                              "kms:CreateAlias"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Sid": "SecretsManagerPermissionsForInfioEC2Instance",
                          "Effect": "Allow",
                          "Action": [
                            "secretsmanager:UpdateSecret",
                            "secretsmanager:TagResource",
                            "secretsmanager:GetSecretValue",
                            "secretsmanager:DeleteSecret",
                            "secretsmanager:CreateSecret"        
                          ],
                          "Resource": [{
                            "Fn::Join": [ ":", [ "arn:aws:secretsmanager", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "secret:infio-source-db-credentials*" ] ]
                          },
                          {
                            "Fn::Join": [ ":", [ "arn:aws:secretsmanager", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "secret:infio-target-db-credentials*" ] ]
                          },
                          {
                            "Fn::Join": [ ":", [ "arn:aws:secretsmanager", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "secret:infio*" ] ]
                          }],
                          "Condition": {
                              "StringEquals": {
                              "aws:ResourceTag/Purpose": "infio"
                              }
                          }
                        },
                        {
                          "Sid": "ListAllS3Buckets",
                          "Effect": "Allow",
                          "Action": [
                            "s3:ListBucket",
                            "s3:ListAllMyBuckets"
                          ],
                          "Resource": [ "*" ]
                        },
                        {
                          "Sid": "SecretsManagerCreatePermissionsForInfioEC2Instance",
                          "Effect": "Allow",
                          "Action": [
                            "secretsmanager:CreateSecret",
                            "secretsmanager:ListSecrets",
                            "secretsmanager:GetRandomPassword",
                            "secretsmanager:DescribeSecret"

                          ],
                          "Resource": "*"
                        },
                        {
                          "Sid": "S3BucketPermissionsForInfioEC2Instance",
                          "Effect": "Allow",
                          "Action": [
                            "s3:GetEncryptionConfiguration",
                            "s3:PutEncryptionConfiguration",
                            "s3:PutBucketTagging",
                            "s3:PutObjectTagging",
                            "s3:PutBucketPolicy",
                            "s3:PutBucketPublicAccessBlock",
                            "s3:GetBucketLocation",
                            "s3:ListBucket",
                            "s3:GetObject",
                            "s3:PutObject",
                            "s3:GetBucketLocation",
                            "s3:GetBucketVersioning",
			                    	"s3:GetObjectVersion",
				                    "s3:PutBucketVersioning"

                          ],
                          "Resource": [{
                            "Fn::Join": [ ":", [ "arn:aws:s3::", "infio-private-bucket" ] ]
                          },
                          {
                            "Fn::Join": [ ":", [ "arn:aws:s3::", "infio-private-bucket/*" ] ]
                          }]
                        },
                        {
                          "Sid": "S3BucketCreatePermissionsForInfioEC2Instance",
                          "Effect": "Allow",
                          "Action": [
                            "s3:CreateBucket"

                          ],
                          "Resource": {
                            "Fn::Join": [ ":", [ "arn:aws:s3::", "infio-private-bucket" ] ]
                          }
                        },
                        {
                          "Sid": "CloudWatchLogsPermissionsForInfioEC2Instance",
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents",
                            "logs:DescribeLogStreams",
                            "logs:CreateLogGroup",
                            "logs:DescribeLogGroups"
                          ],
                          "Resource": {
                            "Fn::Join": [ ":", [ "arn:aws:logs", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "log-group:/*" ]  ]
                          }
                        },
                        {
                        "Sid": "InfioLicenseManagerIntegrationPolicy",
                        "Effect": "Allow",
                        "Action": [
                            "license-manager:CheckoutLicense",
                            "license-manager:ExtendLicenseConsumption",
                            "license-manager:ListReceivedLicenses",
                            "license-manager:GetLicense"
                          ],
                        "Resource": "*"
                        },
                        {
                          "Sid": "InfioDMSPermissionSet",
                          "Effect": "Allow",
                          "Action": [
                            "dms:CreateDataProvider",
                            "dms:CreateMigrationProject",
                            "dms:CreateDataMigration",
                            "dms:CreateReplicationInstance",
                            "dms:ListDataProviders",
                            "dms:ListMigrationProjects",
                            "dms:AddTagsToResource",
                            "dms:StartDataMigration",
                            "dms:DescribeInstanceProfiles",
                            "dms:ListInstanceProfiles",
                            "dms:StartMetadataModelAssessment",
                            "dms:ListMetadataModelAssessments",
                            "dms:UpdateMigrationProject",
                            "dms:ExportMetadataModelAssessment"
                          ],
                          "Resource": "*"
                        },
                        {   
                            "Sid": "InfioDMSDeleteUpdatePermissionSet",
                            "Effect": "Allow",
                            "Action": [
                                "dms:UpdateDataProvider",
                                "dms:DeleteDataProvider",
                                "dms:DeleteMigrationProject"
                            ],
                            "Resource": [{
                              "Fn::Join": [ ":", [ "arn:aws:dms", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "migration-project:*" ]  ]
                            },
                            {
                              "Fn::Join": [ ":", [ "arn:aws:dms", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "data-provider:*" ]  ]
                            }
                            ]
                        },
                        {
                          "Sid": "InfioRDSReadOnlyPermissions",
                          "Effect": "Allow",
                          "Action": [
                            "rds:DescribeDBClusters",
                            "rds:DescribeDBInstances",
                            "rds:DescribeDBClusterSnapshots",
                            "rds:ListTagsForResource"
                          ],
                          "Resource": [{
                            "Fn::Join": [ ":", [ "arn:aws:rds", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "cluster", "*" ]  ]
                          },
                          {
                            "Fn::Join": [ ":", [ "arn:aws:rds", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "db", "*" ]  ]
                          },
                          {
                            "Fn::Join": [ ":", [ "arn:aws:rds", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "*" ]  ]
                          }]
                        },
                        {
                          "Sid": "InfioAbilityToPassTheRoleRequiredByDMS",
                          "Effect": "Allow",
                          "Action": [
                            "iam:PassRole"
                          ],
                          "Resource": {
                            "Fn::Join": [ ":", [ "arn:aws:iam:", { "Ref": "AWS::AccountId" }, "role/infio-ec2-dms-role" ]  ]
                          }
                        },
                        {
                          "Sid": "InfioAbilityToListRolesRequiredByInfioUI",
                          "Effect": "Allow",
                          "Action": [
                            "iam:ListRoles"
                          ],
                          "Resource": {
                            "Fn::Join": [ ":", [ "arn:aws:iam:", { "Ref": "AWS::AccountId" }, "role/*" ]  ]
                          }
                        }
                      ]
                    }
                  }
          ],
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/AmazonSSMManagedEC2InstanceDefaultPolicy",
            "arn:aws:iam::aws:policy/service-role/AWSLicenseManagerConsumptionPolicy",
            "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
            
          ],
          "Tags" : [ {
              "Key" : "Purpose",
              "Value" : "infio"
          }]
        }
      },
      "InfioEC2InstanceKey" : {
        "Type" : "AWS::EC2::KeyPair",
        "Properties" : {
            "KeyFormat" : "pem",
            "KeyName" : "InfioEC2InstanceKey",
            "KeyType" : "rsa",
            "Tags" : [ 
                {
                    "Key" : "Purpose",
                    "Value" : "infio"
                }
              ]
        }
    },
    "InfioEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile" : {"Ref": "InfioEC2Profile"},
        "BlockDeviceMappings" : [ 
          {
            "DeviceName" : "/dev/sda1",
            "Ebs" : {
              "DeleteOnTermination" : true,
              "Encrypted" : true,
              "KmsKeyId" : {
                "Fn::Join": [ "/", [ "alias", { "Ref": "InfioEC2EncryptionKeyAlias" } ]  ]  
              },
              "VolumeSize" : 50,
              "VolumeType" : "gp3"
            }
          }
        ],
        "ImageId": { "Ref": "ImageId" },
        "InstanceType": { "Ref": "EC2InstanceType" },
        "KeyName": { "Ref": "InfioEC2InstanceKey" },
        "SecurityGroupIds": [{ "Ref": "EC2DMSSecurityGroup" }],
        "SubnetId": { "Ref": "SubnetID" },
        "Tags" : [ 
            {
                "Key" : "Purpose",
                "Value" : "infio"
            },
            {
              "Key" : "Name",
              "Value" : "infio-assessment-instance"
          }
          ]
      }
    },
    "DMSInstanceProfile":{
      "Type" : "AWS::DMS::InstanceProfile",
      "Properties" : {
          "Description" : "This is INFIO DMS SC Instance Profile.",
          "InstanceProfileIdentifier" : "infio-dms-instance-profile",
          "InstanceProfileName" : "infio-dms-instance-profile",
          "NetworkType" : "IPV4",
          "PubliclyAccessible" : false,
          "SubnetGroupIdentifier" : "infio-dms-subnet-group",
          "Tags" : [ {
            "Key" : "Purpose",
            "Value" : "infio"
            } ],
          "VpcSecurityGroups" : [ { "Ref": "EC2DMSSecurityGroup" } ]
        }
    }
  },
  "Outputs": {
    "EC2IAMRoleName": {
      "Description": "The name of the IAM role associated with Infio EC2 instance.",
      "Value": {
        "Ref": "InfioEC2Role"
      }
    },
    "EC2InstanceID": {
      "Description": "The ID of the Infio EC2 instance.",
      "Value": {
        "Ref": "InfioEC2Instance"
      }
    },
      "EC2DMSSecurityGroup": {
        "Description": "The ID of the SG attached to the Infio EC2 instance and the DMS SC Instance.",
        "Value": {
          "Ref": "EC2DMSSecurityGroup"
        }
    }
  }
}
